<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Calling REST Services in Springboot</title>
      <link href="/2020/04/20/RestTemplate-in-Springboot/"/>
      <url>/2020/04/20/RestTemplate-in-Springboot/</url>
      
        <content type="html"><![CDATA[<h3 id="REST-Resource-Representational-State-Transfer"><a href="#REST-Resource-Representational-State-Transfer" class="headerlink" title="(REST) Resource Representational State Transfer"></a>(REST) Resource Representational State Transfer</h3><p>先来了解一下REST服务，转自<a href="https://www.zhihu.com/question/28557115" target="_blank" rel="noopener">知乎</a></p><h4 id="Rest是什么？"><a href="#Rest是什么？" class="headerlink" title="Rest是什么？"></a>Rest是什么？</h4><blockquote><p><a href="https://www.zhihu.com/people/6ef2e77274cb0719253a577665cf690e" target="_blank" rel="noopener">@Ivony</a> 老师的一句话概括很精辟：<br><strong>URL定位资源，用HTTP动词（GET,POST,DELETE,DETC）描述操作。</strong></p></blockquote><p><strong>先说REST名称</strong><br>全称是 Resource Representational State Transfer：通俗来讲就是：资源在网络中以某种表现形式进行状态转移。分解开来：<br>Resource：资源，即数据（前面说过网络的核心）。比如 newsfeed，friends等；<br>Representational：某种表现形式，比如用JSON，XML，JPEG等；<br>State Transfer：状态变化。通过HTTP动词实现。</p><p><strong>REST的出处</strong><br>Roy Fielding的毕业论文。这哥们参与设计HTTP协议，也是Apache Web Server项目（可惜现在已经是 nginx 的天下）的co-founder。PhD的毕业学校是 UC Irvine，Irvine在加州，有着充裕的阳光和美丽的海滩，是著名的富人区。Oculus VR 的总部就坐落于此（虚拟现实眼镜，被FB收购，CTO为Quake和Doom的作者 John Carmack）。<br>众说周知，论文都是晦涩难懂的。当年在CMU读书的时候，很多课程都会安排每周两篇的Paper review。现在回想起来每次写Paper review都是我最为痛苦的时候。REST这篇博士论文毫无疑问更甚。<br>论文地址：<a href="https://link.zhihu.com/?target=http%3A//www.ics.uci.edu/~fielding/pubs/dissertation/top.htm">Architectural Styles and the Design of Network-based Software Architectures</a><br>REST章节：<a href="https://link.zhihu.com/?target=http%3A//www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm">Fielding Dissertation: CHAPTER 5: Representational State Transfer (REST)</a></p><p><strong>RESTful API</strong><br>实用的是如何正确地理解 RESTful架构和设计好RESTful API。</p><p><strong>首先为什么要用RESTful结构呢？</strong><br>大家都知道”<strong>古代</strong>“网页是前端后端融在一起的，比如之前的PHP，JSP等。在之前的桌面时代问题不大，但是近年来移动互联网的发展，各种类型的Client层出不穷，RESTful可以通过一套统一的接口为 Web，iOS和Android提供服务。另外对于广大平台来说，比如Facebook platform，微博开放平台，微信公共平台等，它们不需要有显式的前端，只需要一套提供服务的接口，于是RESTful更是它们最好的选择。在RESTful架构下：</p><img src="/2020/04/20/RestTemplate-in-Springboot/06ee404783540f0af299042057738a99_720w.jpg" alt="img" style="zoom:Infinity%;"><p><strong>Server的API如何设计才满足RESTful要求?</strong><br>首先是简洁版里面的那几点。外加一些附带的 best practices：</p><ol><li><p>URL root:<br><a href="https://link.zhihu.com/?target=https%3A//example.org/api/v1/">https://example.org/api/v1/</a>*<br><a href="https://link.zhihu.com/?target=https%3A//api.example.com/v1/">https://api.example.com/v1/</a>*</p></li><li><p>API versioning:<br>可以放在URL里面，也可以用HTTP的header：<br>/api/v1/</p></li><li><p>URI使用名词而不是动词，且推荐用复数。<br>BAD</p><ul><li>/getProducts</li><li>/listOrders</li><li>/retrieveClientByOrder?orderId=1</li></ul><p>GOOD</p><ul><li>GET /products : will return the list of all products</li><li>POST /products : will add a product to the collection</li><li>GET /products/4 : will retrieve product #4</li><li>PATCH/PUT /products/4 : will update product #4</li></ul></li><li><p>保证 HEAD 和 GET 方法是安全的，不会对资源状态有所改变（污染）。比如严格杜绝如下情况：<br>GET /deleteProduct?id=1</p></li><li><p>资源的地址推荐用嵌套结构。比如：<br>GET /friends/10375923/profile<br>UPDATE /profile/primaryAddress/city</p></li><li><p>警惕返回结果的大小。如果过大，及时进行分页（pagination）或者加入限制（limit）。HTTP协议支持分页（Pagination）操作，在Header中使用 Link 即可。</p></li><li><p>使用正确的HTTP Status Code表示访问状态：<a href="https://link.zhihu.com/?target=http%3A//www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">HTTP/1.1: Status Code Definitions</a></p></li><li><p>在返回结果用明确易懂的文本（String。注意返回的错误是要给人看的，避免用 1001 这种错误信息），而且适当地加入注释。</p></li><li><p>关于安全：自己的接口就用https，加上一个key做一次hash放在最后即可。考虑到国情，HTTPS在无线网络里不稳定，可以使用Application Level的加密手段把整个HTTP的payload加密。有兴趣的朋友可以用手机连上电脑的共享Wi-Fi，然后用Charles监听微信的网络请求（发照片或者刷朋友圈）。如果是平台的API，可以用成熟但是复杂的OAuth2，新浪微博这篇：<a href="https://link.zhihu.com/?target=http%3A//open.weibo.com/wiki/%E6%8E%88%E6%9D%83%E6%9C%BA%E5%88%B6%E8%AF%B4%E6%98%8E">授权机制说明</a></p></li></ol><h3 id="在SpringBoot-2-X-中调用REST服务"><a href="#在SpringBoot-2-X-中调用REST服务" class="headerlink" title="在SpringBoot 2.X 中调用REST服务"></a>在SpringBoot 2.X 中调用REST服务</h3><p>从<a href="https://docs.spring.io/spring-boot/docs/2.2.6.RELEASE/reference/html/spring-boot-features.html#boot-features-resttemplate" target="_blank" rel="noopener">官方文档</a>中可以看出</p>]]></content>
      
      
      
        <tags>
            
            <tag> Springboot </tag>
            
            <tag> RestTemplate </tag>
            
            <tag> WebClient </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/03/30/hello-world/"/>
      <url>/2020/03/30/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
